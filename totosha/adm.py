import telegram
from telegram import InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
import glob
from telegram import ParseMode
from .views import *
from .info import *
from .comands import *
from .zamovlenia import *
from django.contrib.auth.models import User, Group

import json
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from .models import *
from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login, logout
from telegram import ReplyKeyboardMarkup, KeyboardButton
from django.utils.translation import activate, gettext as _
import os
from django.http import HttpResponse
from django.template.loader import render_to_string
from django.conf import settings
import os
import requests
from bs4 import BeautifulSoup
from urllib.parse import quote
import urllib.request
from shutil import copyfile
from django.core.files import File
import random
from urllib.parse import quote
from django.http import HttpResponse
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from io import BytesIO
import tempfile
import os


emoji = ['ü§î', 'üéà', 'üéÆ', 'üöÄ', 'üöÇ', 'üé¢', 'üöó', '‚öΩ', 'üèÄ', 'ü¶ñ', 'üêù', 'üê∂', 'üì≤', 'üá∫üá¶']


def knonka(message_id, telegram_id, bot):
    keyboard = [
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="üíñ –û–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏")],
        [KeyboardButton(text="üîç –ü–æ—à—É–∫"), KeyboardButton(text="üìö –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å")],
        [KeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º"), KeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")],
        [KeyboardButton(text="üè† –î–æ–¥–æ–º—É")]
    ]
    admin_users = User.objects.filter(groups__name='administrator', is_staff=True)
    if admin_users.exists():
        admin_usernames = admin_users.values_list('username', flat=True)
        admin_chat_ids = [int(username) for username in admin_usernames]
        if telegram_id in admin_chat_ids:
            keyboard.append([KeyboardButton(text="–í—Ö—ñ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    random_emoji = random.choice(emoji)
    bot.send_message(telegram_id, text=random_emoji, reply_markup=reply_markup)


def admin_panel(data, telegram_id, bot):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    admin_users = User.objects.filter(groups__name='administrator', is_staff=True)
    if admin_users.exists():
        admin_usernames = admin_users.values_list('username', flat=True)
        admin_chat_ids = [int(username) for username in admin_usernames]
        if telegram_id in admin_chat_ids:
            prof.is_authenticated = True
            prof.save()
            if prof.is_authenticated:
                admin_chat_id = telegram_id
                admin_message = f"–ü—Ä–∏–≤—ñ—Ç, {prof.first_name} {prof.last_name}. –í—ñ—Ç–∞—é —Ç–µ–±–µ –≤ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!!!"
                bot.send_message(chat_id=admin_chat_id, text=admin_message)
                message = "–û–±–µ—Ä–∏ –¥—ñ—é:"
                keyboard = [
                    [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ", callback_data="write")],
                     [InlineKeyboardButton("–ó—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—ÉÔ∏è", callback_data="rozsilka")],
                     [InlineKeyboardButton("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Ä–æ–±–æ—Ç—ñÔ∏è", callback_data="work")],
                     [InlineKeyboardButton("–ê—Ä—Ö—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—åÔ∏è", callback_data="arhivzakaz")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)
    else:
        bot.send_message(chat_id=telegram_id, text="–í —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É—Ç–ø—É!!!")

def write(data, telegram_id, bot):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        users = TelegramUser.objects.all()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        total_users = len(users)
        page_size = 10  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –æ–¥–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        current_page = 1
        max_pages = (total_users + page_size - 1) // page_size  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        start_index = (current_page - 1) * page_size
        end_index = start_index + page_size
        prof.step = "–ø–æ—à—É–∫–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
        prof.save()
        buttons = []

        for user in users[start_index:end_index]:
            button_text = f"{user.first_name} {user.last_name} ({user.telegram_id})"
            callback_data = f"user_{user.telegram_id}"
            buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

        reply_markup = InlineKeyboardMarkup(buttons)

        if total_users > page_size:
            if current_page > 1:
                previous_page_callback = "kor_previouspage"
                reply_markup.row(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=previous_page_callback))
            if current_page < max_pages:
                next_page_callback = "kor_nextpage"
                reply_markup.row(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=next_page_callback))

        bot.sendMessage(telegram_id, "–û–±–µ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞–±–æ –¥–ª—è –ø–æ—à—É–∫—É –≤–≤–µ–¥–∏ –π–æ–≥–æ ID", reply_markup=reply_markup)


def korwrite(message_id, telegram_id, bot, kor, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        users = TelegramUser.objects.all()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        total_users = len(users)
        page_size = 10  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –æ–¥–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        current_page = 1
        max_pages = (total_users + page_size - 1) // page_size  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        start_index = (current_page - 1) * page_size
        end_index = start_index + page_size

        if kor == "kor_previouspage":
            if current_page > 1:
                current_page -= 1
        elif kor == "kor_nextpage":
            if current_page < max_pages:
                current_page += 1

        start_index = (current_page - 1) * page_size
        end_index = start_index + page_size

        prof.step = "–ø–æ—à—É–∫–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
        prof.save()
        buttons = []

        for user in users[start_index:end_index]:
            button_text = f"{user.first_name} {user.last_name} ({user.telegram_id})"
            callback_data = f"user_{user.telegram_id}"
            buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

        reply_markup = InlineKeyboardMarkup(buttons)

        if total_users > page_size:
            if current_page > 1:
                previous_page_callback = "kor_previouspage"
                reply_markup.row(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=previous_page_callback))
            if current_page < max_pages:
                next_page_callback = "kor_nextpage"
                reply_markup.row(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=next_page_callback))

        bot.sendMessage(telegram_id, "–û–±–µ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞–±–æ –¥–ª—è –ø–æ—à—É–∫—É –≤–≤–µ–¥–∏ –π–æ–≥–æ ID", reply_markup=reply_markup)


def searchuser(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        text = data['message'].get('text')
        try:
            id_kor = int(text)
            print(id_kor)
            user = TelegramUser.objects.get(telegram_id=id_kor)  # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤–∫–∞–∑–∞–Ω–∏–º id_kor
            button_text = f"{user.first_name} {user.last_name} ({user.telegram_id})"
            callback_data = f"user_{user.telegram_id}"
            buttons = [[InlineKeyboardButton(button_text, callback_data=callback_data)]]
            reply_markup = InlineKeyboardMarkup(buttons)
            bot.sendMessage(telegram_id, "–û–±–µ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", reply_markup=reply_markup)
        except:
            message = "–ü–æ–º–∏–ª–∫–∞. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑"
            bot.sendMessage(telegram_id, message)



def rozsilka(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.step = "rozsilka"
        prof.save()
        text = '–í–≤–µ–¥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏", –¥–ª—è –≤–∏—Ö–æ–¥—É'
        keyboard = [
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="zavthshyty")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=text, reply_markup=reply_markup)


def rozsilkauser(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        users = TelegramUser.objects.all()
        text = data['message'].get('text')
        photo_data = data['message'].get('photo')
        caption = data['message'].get('caption')
        if caption and photo_data:
            photo = photo_data[-1]  # –í–∏–±–∏—Ä–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É
            photo_id = photo['file_id']
            for user in users:
                bot.send_photo(chat_id=user.telegram_id, photo=photo_id, caption=caption)

        elif photo_data:
            photo = photo_data[-1]  # –í–∏–±–∏—Ä–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É
            photo_id = photo['file_id']
            for user in users:
                bot.send_photo(chat_id=user.telegram_id, photo=photo_id)

        elif text:
            for user in users:
                bot.send_message(chat_id=user.telegram_id, text=text)

    rozsilka(message_id, telegram_id, bot, data)



def zavthshyty(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.step = "–ø—É—Å—Ç–æ"
        prof.save()
        bot.send_message(chat_id=telegram_id, text="–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –í–ò–ú–ö–ù–ï–ù–ê!!!")
        knonka(message_id, telegram_id, bot)
        users = TelegramUser.objects.all()
        for user in users:
            keyboard = [
                [InlineKeyboardButton("üì± –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º", callback_data="messages")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(chat_id=user.telegram_id, text="üì±", reply_markup=reply_markup)


def zviazatisia(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.is_chat = True
        id_user = prof.variable_1
        prof.save()
        user(message_id, telegram_id, bot, id_user, data)


def zatisia(message_id, telegram_id, bot, data, id_kor):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.is_chat = True
        id_user = id_kor
        prof.save()
        user(message_id, telegram_id, bot, id_user, data)


def user(message_id, telegram_id, bot, id_user, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.is_chat = True
        prof.variable_1 = id_user
        prof.save()

        users = TelegramUser.objects.get(telegram_id=id_user)

        message = "‚úâÔ∏è –í–≤–µ–¥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        bot.sendMessage(telegram_id, message)
        if users.is_chat == False:
            message = f"–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {users} –¥–æ —Ä–æ–∑–º–æ–≤–∏?"
            keyboard = [
                [InlineKeyboardButton("–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏", callback_data="pidklychyty_user")],
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data="stop_user")]
            ]
        elif users.is_chat:
            message = f"–í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {users} –¥–æ —Ä–æ–∑–º–æ–≤–∏?"
            keyboard = [
                [InlineKeyboardButton("–í—ñ–¥–∫–ª—é—á–∏—Ç–∏", callback_data="vidklychyty_user")],
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data="stop_user")]
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)


def pidklychyty_user(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        users = TelegramUser.objects.get(telegram_id=prof.variable_1)
        users.is_chat = True
        users.variable_1 = telegram_id
        users.save()
        vidpovid(message_id, telegram_id, bot, data)

        message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {users} –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –í—ñ–Ω –º–æ–∂–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        keyboard = [
            [InlineKeyboardButton("–í—ñ–¥–∫–ª—é—á–∏—Ç–∏", callback_data="vidklychyty_user")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data="stop_user")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)
        bot.send_message(chat_id=prof.variable_1, text="–í–∞—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Ä–æ–∑–º–æ–≤–∏!!!")



def vidklychyty_user(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        users = TelegramUser.objects.get(telegram_id=prof.variable_1)
        users.is_chat = False
        users.save()

        message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {users} –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º–æ–≤–∏"
        keyboard = [
            [InlineKeyboardButton("–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏", callback_data="pidklychyty_user")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data="stop_user")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)
        bot.send_message(chat_id=prof.variable_1, text="–í–∞—Å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º–æ–≤–∏!!!")


def stop_user(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)

    if prof.is_authenticated:
        users = TelegramUser.objects.get(telegram_id=prof.variable_1)
        users.is_chat = False
        # users.variable_1 = "00000"
        users.save()

        prof.is_chat = False
        # prof.variable_1 = "00000"
        prof.save()
        message = "üèÅ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="write")],
            [InlineKeyboardButton("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)
        bot.send_message(chat_id=prof.variable_1, text=message)
        knonka(message_id, telegram_id, bot)


def vidpovid(message_id, telegram_id, bot, data):
    prof_1 = TelegramUser.objects.get(telegram_id=telegram_id)
    try:
        text = data['message'].get('text')
        photo_data = data['message'].get('photo')
        caption = data['message'].get('caption')
        send_id = prof_1.variable_1

        if caption and photo_data:
            photo = photo_data[-1]  # –í–∏–±–∏—Ä–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É
            photo_id = photo['file_id']
            bot.send_photo(chat_id=send_id, photo=photo_id, caption=caption)
        elif photo_data:
            photo = photo_data[-1]  # –í–∏–±–∏—Ä–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É
            photo_id = photo['file_id']
            bot.send_photo(chat_id=send_id, photo=photo_id)
        elif text:
            bot.send_message(chat_id=send_id, text=text)

        else:
            None
    except:
        None


def work(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ Work
        try:
            orders = Work.objects.all()
        except:
            return
        if orders.exists():
            for order in orders:
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                username = order.telegram_user
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç–∞—Ç—É—Å–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                statuses = []
                if order.status_1:
                    statuses.append("- –ö–æ–Ω—Ç–∞–∫—Ç –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
                if order.status_2:
                    statuses.append("- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
                if order.status_3:
                    statuses.append("- –û–ø–ª–∞—Ç–∞")
                if order.status_4:
                    statuses.append("- –î–æ—Å—Ç–∞–≤–∫–∞")
                if order.status_5:
                    statuses.append("- –ó–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
                if order.status_6:
                    statuses.append("- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è/–í—ñ–¥–º–æ–≤–∞")
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ –∑ –∫–æ–∂–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –≤ –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º —Ç–∞–±—É–ª—è—Ü—ñ—ó
                status = "\n\t".join(statuses)
                message = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order.id}\n"
                message += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username}\n"
                message += f"–°—Ç–∞—Ç—É—Å:\n\t{status}\n"
                message += f"–°—É–º–∞: {order.total_price}–≥—Ä–Ω.\n\n"
                # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                keyboard = [
                    [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", callback_data=f"edit_order_{order.id}"),
                     InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order.id}")],
                    [InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∞—Ä—Ö—ñ–≤", callback_data=f"close_order_{order.id}"),
                     InlineKeyboardButton("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"info_order_{order.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)
        else:
            message = "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."
            bot.send_message(chat_id=telegram_id, text=message)
        knonka(message_id, telegram_id, bot)


def edit_order(message_id, telegram_id, bot, order_id, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        orders = Work.objects.get(id=order_id)
        prof.step = "–î–æ–¥–∞—Ç–∫–æ–≤–∞—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
        prof.variable = order_id
        prof.save()
        message = "–í–≤–µ–¥–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        bot.send_message(chat_id=telegram_id, text=message)


def toaddkomentarszakaz(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.step = "–ü—É—Å—Ç–æ"
        prof.save()
        order_id = prof.variable
        text = data['message']['text']
        orders = Work.objects.get(id=order_id)
        orders.info_zakaz += text
        orders.save()
        message = f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω–æ!!!."
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"work")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)


def change_status(message_id, telegram_id, bot, order_id, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.step = 'change_status'
        prof.save()
        orders = Work.objects.get(id=order_id)
        statuses = []
        buttons = []
        if not orders.status_1:
            statuses.append("- –ö–æ–Ω—Ç–∞–∫—Ç –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
            buttons.append([InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç –∑ –∫–ª—ñ—î–Ω—Ç–æ–º", callback_data=f"status_1_{order_id}")])
        if not orders.status_2:
            statuses.append("- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            buttons.append([InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"status_2_{order_id}")])
        if not orders.status_3:
            statuses.append("- –û–ø–ª–∞—Ç–∞")
            buttons.append([InlineKeyboardButton("–û–ø–ª–∞—Ç–∞", callback_data=f"status_3_{order_id}")])
        if not orders.status_4:
            statuses.append("- –î–æ—Å—Ç–∞–≤–∫–∞")
            buttons.append([InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"status_4_{order_id}")])
        if not orders.status_5:
            statuses.append("- –ó–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            buttons.append([InlineKeyboardButton("–ó–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"status_5_{order_id}")])
        if not orders.status_6:
            statuses.append("- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è/–í—ñ–¥–º–æ–≤–∞")
            buttons.append([InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è/–í—ñ–¥–º–æ–≤–∞", callback_data=f"status_6_{order_id}")])
        message = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {orders.id}, –≤—ñ–¥ {orders.telegram_user} \n–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞: \n"
        reply_markup = InlineKeyboardMarkup(buttons)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)


def close_order(message_id, telegram_id, bot, order_id, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        try:
            order = Work.objects.get(id=order_id)
        except:
            return
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –≤ —Ç–∞–±–ª–∏—Ü—ñ Arhivzamovlen
        arhiv_order = Arhivzamovlen.objects.create(
            telegram_user=order.telegram_user,
            info_user=order.info_user,
            order_info=order.order_info,
            total_price=order.total_price,
            info=order.info,
            info_zakaz=order.info_zakaz,
            status_1=order.status_1,
            info_status_1=order.info_status_1,
            datetime_status_1=order.datetime_status_1,
            status_2=order.status_2,
            info_status_2=order.info_status_2,
            datetime_status_2=order.datetime_status_2,
            status_3=order.status_3,
            info_status_3=order.info_status_3,
            datetime_status_3=order.datetime_status_3,
            status_4=order.status_4,
            info_status_4=order.info_status_4,
            datetime_status_4=order.datetime_status_4,
            status_5=order.status_5,
            info_status_5=order.info_status_5,
            datetime_status_5=order.datetime_status_5,
            status_6=order.status_6,
            info_status_6=order.info_status_6,
            datetime_status_6=order.datetime_status_6,
            datetime=order.datetime
        )
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∑ —Ç–∞–±–ª–∏—Ü—ñ Work
        order.delete()
        message = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–µ. –î–∞–Ω—ñ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ –¥–æ –∞—Ä—Ö—ñ–≤—É."
        bot.send_message(chat_id=telegram_id, text=message)


def info_order(message_id, telegram_id, bot, order_id, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        orders = Work.objects.get(id=order_id)
        statuses = []
        if orders.status_1:
            statuses.append(f"- –ö–æ–Ω—Ç–∞–∫—Ç –∑ –∫–ª—ñ—î–Ω—Ç–æ–º\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_1}\n  –¥–∞—Ç–∞: {orders.datetime_status_1}")
        if orders.status_2:
            statuses.append(f"- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_2}\n  –¥–∞—Ç–∞: {orders.datetime_status_2}")
        if orders.status_3:
            statuses.append(f"- –û–ø–ª–∞—Ç–∞\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_3}\n  –¥–∞—Ç–∞: {orders.datetime_status_3}")
        if orders.status_4:
            statuses.append(f"- –î–æ—Å—Ç–∞–≤–∫–∞\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_4}\n  –¥–∞—Ç–∞: {orders.datetime_status_4}")
        if orders.status_5:
            statuses.append(f"- –ó–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_5}\n  –¥–∞—Ç–∞: {orders.datetime_status_5}")
        if orders.status_6:
            statuses.append(f"- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è/–í—ñ–¥–º–æ–≤–∞\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_6}\n  –¥–∞—Ç–∞: {orders.datetime_status_6}")
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ –∑ –∫–æ–∂–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –≤ –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º —Ç–∞–±—É–ª—è—Ü—ñ—ó
        status = "\n\t".join(statuses)
        message = f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order_id}\n\n"
        message += f"–°—Ç–∞—Ç—É—Å: \n{status}\n\n"
        message += f"{orders.info_user}\n\n"
        message += f"{orders.order_info}\n\n"
        message += f"{orders.info}\n\n"
        message += f"–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {orders.info_zakaz}\n\n"
        message += f"–°—É–º–∞: {orders.total_price}–≥—Ä–Ω.\n\n"
        # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", callback_data=f"edit_order_{order_id}"),
             InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order_id}")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∞—Ä—Ö—ñ–≤", callback_data=f"close_order_{order_id}"),
             InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"work")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)


def status(message_id, telegram_id, bot, status_id, order_id, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.variable = order_id
        prof.variable_1 = status_id
        prof.save()
        orders = Work.objects.get(id=order_id)
        # –ó–º—ñ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –Ω–∞ True
        if status_id == '1':
            orders.status_1 = True
        elif status_id == '2':
            orders.status_2 = True
        elif status_id == '3':
            orders.status_3 = True
        elif status_id == '4':
            orders.status_4 = True
        elif status_id == '5':
            orders.status_5 = True
        elif status_id == '6':
            orders.status_6 = True
        orders.save()
        # message = f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–Ω–æ!!!."
        # bot.answer_callback_query(callback_query_id=data['callback_query']['id'], text=message, show_alert=True)
        message = "–ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –Ω–∞–ø–∏—à–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä"
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Å—Ç–∞—Ç—É—Å–∞", callback_data=f"Komentarstatusa"),
             InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"work")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)


def komentarstatusa(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.step = "–ö–æ–º–µ–Ω—Ç–∞—Ä—Å—Ç–∞—Ç—É—Å–∞"
        prof.save()
        message = "–ù–∞–ø–∏—à–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤ —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞"
        bot.send_message(chat_id=telegram_id, text=message)


def toaddkomentarstatysa(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        prof.step = "–ü—É—Å—Ç–æ"
        prof.save()
        text = data['message']['text']
        order_id = prof.variable
        status_id = prof.variable_1
        orders = Work.objects.get(id=order_id)
        # –ó–º—ñ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
        if status_id == '1':
            orders.info_status_1 = text
        elif status_id == '2':
            orders.info_status_2 = text
        elif status_id == '3':
            orders.info_status_3 = text
        elif status_id == '4':
            orders.info_status_4 = text
        elif status_id == '5':
            orders.info_status_5 = text
        elif status_id == '6':
            orders.info_status_6 = text
        orders.save()
        message = f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω–æ!!!."
        keyboard = [
            [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä", callback_data=f"Komentarstatusa"),
             InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"work")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)


def arhivzakaz(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        try:
            orders = Arhivzamovlen.objects.order_by('-id')[:10]  # –í–∏–±—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –ø–æ–ª–µ–º 'id'
        except:
            return
        if orders.exists():
            for order in orders:
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                username = order.telegram_user
                message = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order.id}\n"
                message += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username}\n"
                message += f"–°—É–º–∞: {order.total_price}–≥—Ä–Ω.\n\n"
                # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                keyboard = [
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"admin_panel"),
                     InlineKeyboardButton("–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data=f"info_arhiv_{order.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)
            message_1 = f"–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –≤–µ—Å—å –∞—Ä—Ö—ñ–≤ –≤ —Ñ–∞–π–ª"
            keyboard = [
                [InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª", callback_data="PDFarhiv")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(chat_id=telegram_id, text=message_1, reply_markup=reply_markup)
        else:
            message = "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."
            bot.send_message(chat_id=telegram_id, text=message)
        knonka(message_id, telegram_id, bot)


def info_arhiv(message_id, telegram_id, bot, order_id, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        orders = Arhivzamovlen.objects.get(id=order_id)
        statuses = []
        if orders.status_1:
            statuses.append(
                f"- –ö–æ–Ω—Ç–∞–∫—Ç –∑ –∫–ª—ñ—î–Ω—Ç–æ–º\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_1}\n  –¥–∞—Ç–∞: {orders.datetime_status_1}")
        if orders.status_2:
            statuses.append(
                f"- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_2}\n  –¥–∞—Ç–∞: {orders.datetime_status_2}")
        if orders.status_3:
            statuses.append(f"- –û–ø–ª–∞—Ç–∞\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_3}\n  –¥–∞—Ç–∞: {orders.datetime_status_3}")
        if orders.status_4:
            statuses.append(f"- –î–æ—Å—Ç–∞–≤–∫–∞\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_4}\n  –¥–∞—Ç–∞: {orders.datetime_status_4}")
        if orders.status_5:
            statuses.append(
                f"- –ó–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_5}\n  –¥–∞—Ç–∞: {orders.datetime_status_5}")
        if orders.status_6:
            statuses.append(
                f"- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è/–í—ñ–¥–º–æ–≤–∞\n  –∫–æ–º–µ—Ç–∞—Ä: {orders.info_status_6}\n  –¥–∞—Ç–∞: {orders.datetime_status_6}")
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ –∑ –∫–æ–∂–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –≤ –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º —Ç–∞–±—É–ª—è—Ü—ñ—ó
        status = "\n\t".join(statuses)
        message = f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order_id}\n\n"
        message += f"–°—Ç–∞—Ç—É—Å: \n{status}\n\n"
        message += f"{orders.info_user}\n\n"
        message += f"{orders.order_info}\n\n"
        message += f"{orders.info}\n\n"
        message += f"–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {orders.info_zakaz}\n\n"
        message += f"–°—É–º–∞: {orders.total_price}–≥—Ä–Ω.\n\n"

        # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        keyboard = [
             [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(chat_id=telegram_id, text=message, reply_markup=reply_markup)


def pdfarhiv(message_id, telegram_id, bot, data):
    prof = TelegramUser.objects.get(telegram_id=telegram_id)
    if prof.is_authenticated:
        try:
            orders = Arhivzamovlen.objects.all()
        except:
            return
        if orders.exists():
            file_path = 'arhiv.txt'  # File path
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å ‚Ññ {}\n\n".format(len(orders)))
                for i, order in enumerate(orders, start=1):
                    file.write("–ó–ê–ú–û–í–õ–ï–ù–ù–Ø ‚Ññ {}\n".format(i))
                    file.write("–°—Ç–∞—Ç—É—Å:\n")
                    if order.status_1:
                        file.write("- –ö–æ–Ω—Ç–∞–∫—Ç –∑ –∫–ª—ñ—î–Ω—Ç–æ–º\n  –∫–æ–º–µ–Ω—Ç–∞—Ä: {}\n  –¥–∞—Ç–∞: {}\n".format(order.info_status_1,
                                                                                               order.datetime_status_1))
                    if order.status_2:
                        file.write(
                            "- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n  –∫–æ–º–µ–Ω—Ç–∞—Ä: {}\n  –¥–∞—Ç–∞: {}\n".format(order.info_status_2,
                                                                                              order.datetime_status_2))
                    if order.status_3:
                        file.write("- –û–ø–ª–∞—Ç–∞\n  –∫–æ–º–µ–Ω—Ç–∞—Ä: {}\n  –¥–∞—Ç–∞: {}\n".format(order.info_status_3,
                                                                                   order.datetime_status_3))
                    if order.status_4:
                        file.write("- –î–æ—Å—Ç–∞–≤–∫–∞\n  –∫–æ–º–µ–Ω—Ç–∞—Ä: {}\n  –¥–∞—Ç–∞: {}\n".format(order.info_status_4,
                                                                                     order.datetime_status_4))
                    if order.status_5:
                        file.write("- –ó–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n  –∫–æ–º–µ–Ω—Ç–∞—Ä: {}\n  –¥–∞—Ç–∞: {}\n".format(order.info_status_5,
                                                                                                order.datetime_status_5))
                    if order.status_6:
                        file.write("- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è/–í—ñ–¥–º–æ–≤–∞\n  –∫–æ–º–µ–Ω—Ç–∞—Ä: {}\n  –¥–∞—Ç–∞: {}\n".format(order.info_status_6,
                                                                                               order.datetime_status_6))
                    file.write("\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {}\n".format(order.info_user))
                    file.write("\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {}\n".format(order.order_info))
                    file.write("\n–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {}\n".format(order.info_zakaz))
                    file.write("\n–°—É–º–∞: {} –≥—Ä–Ω\n".format(order.total_price))
                    file.write("\n===========================================================================\n\n")

            with open(file_path, 'rb') as file:
                bot.send_document(chat_id=telegram_id, document=file, filename='arhiv.txt')
        else:
            message = "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."
            bot.send_message(chat_id=telegram_id, text=message)
        knonka(message_id, telegram_id, bot)



